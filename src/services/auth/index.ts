/* eslint-disable no-param-reassign */
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import {
  GoogleAuthProvider, signInWithPopup, signOut,
} from 'firebase/auth';
import {
  addDoc, getDocs, query, where,
} from 'firebase/firestore';
import { auth, collections } from 'services/firebase';

const googleProvider = new GoogleAuthProvider();

export interface User {
  displayName: string | null;
  email: string | null;
  emailVerified: boolean;
  photoURL: string | null;
  uid: string;
}

export interface AuthState {
  authenticateError?: boolean;
  isLoadingAuth: boolean;
  logoutError?: boolean;
  user?: User;
}

const initialState: AuthState = {
  isLoadingAuth: true,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(authenticateAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const authenticateAsync = createAsyncThunk(
  'auth/authenticate',
  async () => {
    const res = await signInWithPopup(auth, googleProvider);
    const { user } = res || {};
    const q = query(collections.users, where('uid', '==', user.uid));
    const docs = await getDocs(q);

    if (docs.docs.length === 0) {
      await addDoc(collections.users, {
        uid: user.uid,
        name: user.displayName,
        authProvider: 'google',
        email: user.email,
      });
    }

    return {
      displayName: user.displayName,
      email: user.email,
      emailVerified: user.emailVerified,
      photoURL: user.photoURL,
      uid: user.uid,
    };
  },
);

export const logout = createAsyncThunk('auth/logout', async () => {
  await signOut(auth);
});

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUser(state, action: PayloadAction<User | undefined>) {
      state.isLoadingAuth = false;
      state.user = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers(builder) {
    builder.addCase(authenticateAsync.fulfilled, (state, action) => {
      state.isLoadingAuth = false;
      state.user = action.payload;
    });
    builder.addCase(authenticateAsync.rejected, (state) => {
      state.isLoadingAuth = false;
      state.authenticateError = true;
    });
    builder.addCase(logout.fulfilled, (state) => {
      state.user = undefined;
    });
    builder.addCase(logout.rejected, (state) => {
      state.logoutError = true;
    });
  },
});

export const { setUser } = authSlice.actions;
export default authSlice.reducer;
