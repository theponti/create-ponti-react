/* eslint-disable no-param-reassign */
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Session } from '@supabase/supabase-js';
import { createUser, getUserById } from 'services/supabase';

export interface AuthState {
  authenticateError?: boolean;
  isLoadingAuth: boolean;
  logoutError?: boolean;
  user?: User;
}

const initialState: AuthState = {
  isLoadingAuth: true,
};

export const getUserFromSession = createAsyncThunk('auth/get-user', async (session: Session) => {
  const existingUser = await getUserById(session.user.id);

  if (!existingUser) {
    const user = await createUser(existingUser);
    return user;
  }

  return existingUser;
});

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUser(state, action: PayloadAction<User | undefined>) {
      state.isLoadingAuth = false;
      state.user = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers(builder) {
    builder.addCase(getUserFromSession.fulfilled, (state, { payload }) => {
      state.user = payload as User;
    });
  },
});

export const { setUser } = authSlice.actions;
export default authSlice.reducer;
