/* eslint-disable no-param-reassign */
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { Session } from "@supabase/supabase-js";
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { createUser, getUserById, supabase } from "services/supabase";

export interface AuthState {
  authenticateError?: boolean;
  isLoadingAuth: boolean;
  logoutError?: boolean;
  session: Session | null;
  user?: User;
}

const initialState: AuthState = {
  isLoadingAuth: true,
  session: null,
};

export function useDeleteUser() {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  async function deleteUser(id: string) {
    try {
      const { error: deleteUserError } = await supabase.auth.admin.deleteUser(
        id
      );

      if (deleteUserError) {
        setError(deleteUserError.message);
        return;
      }

      // Delete user profile
      const { error: profileDeleteError } = await supabase
        .from("profiles")
        .delete()
        .match({ id });

      if (profileDeleteError) {
        setError(profileDeleteError.message);
        return;
      }

      navigate("/");
    } catch (err: any) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }

  return { deleteUser, error, loading };
}

export const setSession = createAsyncThunk(
  "auth/set-session",
  async (session: Session | null) => {
    if (session) {
      const { data: existingUser, error } = await getUserById(session.user.id);

      // Create new user if none exists
      if (!existingUser || error?.code === "PGRST116") {
        const { data } = await createUser({
          email: session.user.email as string,
          id: session.user.id as string,
        });
        return { session, user: data };
      }

      return { session, user: existingUser };
    }

    return { session };
  }
);

export const authSlice = createSlice({
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUser(state, action: PayloadAction<User | undefined>) {
      state.isLoadingAuth = false;
      state.user = action.payload;
      if (action.payload === undefined) {
        state.session = null;
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers(builder) {
    builder.addCase(setSession.fulfilled, (state, { payload }) => {
      state.user = payload.user;
      state.session = payload.session;
      state.isLoadingAuth = false;
    });
  },
});

export const { setUser } = authSlice.actions;
export default authSlice.reducer;
